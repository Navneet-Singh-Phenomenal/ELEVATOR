


                                                                       $ MY LIFT $
							            _________________

	module lift(s,v,i,clk,UD);
 		 output reg [1:0]s;      // s[1]=x; and s[0]=y;
  		 output reg v;
         	reg [3:0] j;       	 // I CREATED A MEMORY OF 4 BIT   
         	input [3:0] i;
  		 input clk;
         	output reg UD;          // IT DECIDES WHETHER YOU ARE GOING UP OR DOWN
  
  		initial
    		begin
      		s <= 0;
    		end
  
  		always@(i)
    		begin
    		if(i > s)                     // UP LIFT
     		 UD <= 1;
  		else if(i == s)                // SAME FLOOR
   		 UD <= UD;
  		else if(i < s)                // DOWN LIFT
   		 UD <= 0;
    		end
    
    
  		always@(*)
          	j[3:0] = i[3:0];                               
  
  		always@(j)
          	v <= |j[3:0];                                          
  

  		always@( negedge clk & v)
    		 begin
               		if(UD)
                 	   begin                                      // up lift
               		    s[1] <= j[2] | j[3];
      			    s[0] <= (j[1] & (~j[2])) | j[3];
                 	   end
               		else
                	  begin                                       // down lift
      			   s[1] <= ((~j[0])&(~j[1]))&(j[3] | j[2]);                      
                   	   s[0] <= (~j[0])&(j[1] | ((~j[2])&j[3]));            		
                 	  end
               end
  
		always@(s)                                                     
    			case(s)                                             
      			  0 : j[0] <= 0;                                      
      			  1 : j[1] <= 0;
     			  2 : j[2] <= 0;
        		  3 : j[3] <= 0;
              default : 
                begin
                  s <= s;
                end
                  endcase
   		       
    
    endmodule



                                                                  $ TEST BENCH FOR MY LIFT $
                                                               ________________________________

module stimulus;
  reg [0:3] i;
  reg clk;
  wire [1:0] s;
  wire v;
  wire UD;
  
  lift DUT(s,v,i,clk,UD);
  
  initial
    begin
      $dumpfile("dump.vcd");
      $dumpvars(0);
      
      monitor;
      
      clk=1;
      $display("f");
      i=4'b1000;
      
      #(20) i=4'b0001;

      #(10) i=4'b0010;
    end
  
  always #(2) clk=~clk;
  
  initial #(50) $finish;
      
  task monitor;
    
    $monitor($time," s=%d,i=%b,v=%b,UD=%b",s,i,v,UD);
  endtask
  
endmodule


                                                             

						                      OUTPUT


# KERNEL: f
# KERNEL:                    0 s=0,i=1000,v=1,UD=x
# KERNEL:                    2 s=3,i=1000,v=0,UD=x
# KERNEL:                   20 s=3,i=0001,v=1,UD=0                        3RD FLOOR
# KERNEL:                   22 s=0,i=0001,v=0,UD=0                        GROUND FLOOR
# KERNEL:                   30 s=0,i=0010,v=1,UD=1                        GROUND FLOOR
# KERNEL:                   34 s=1,i=0010,v=0,UD=1                        1ST FLOOR
# RUNTIME: Info: RUNTIME_0068 testbench.sv (30): $finish called.








_____________________________________________________________________________________________________________________________________________________________________________________________________









                             
                                      				     $	DOWN LIFT PROGRAM  $
                                                                     _______________________




	                                     ______________
	      			O --------  |		   |_ _ _ _ _  S[1]      // X
				1 --------  |		   |
				2 --------  |		   |_ _ _ _ _  S[0]      // Y	  
	                        3 --------  |______________|
				    

	                                 PRIORITY ENCODER 4x2




       
             module downlift(s,v,i,clk);
 		 output reg [1:0]s;      // s[1]=x; and s[0]=y;
  		 output reg v;
 		 reg [3:0] j;                                                    // I CREATED A MEMORY OF 4 BIT
 		 input reg [3:0] i;
  		input clk;
   
  		always@(*)
   		 j[3:0] = i[3:0];                                               // put the input to the register 
  
  		always@(j)
     		 v <= |j[3:0];                                                   // reduction operation
  
  		always@( negedge clk & v)
    		 begin
      			s[1] <= j[2] | j[3];                                    // Generating next states
      			s[0] <= (j[1] & (~j[2])) | j[3];
                 end
  
		always@(s)                                                     // it works when state changes
    		 begin
      			 case(s)                                              // actions w.r.t state
      			  0 : j[0] <= 0;                                      // we are changing the register values
      			  1 : j[1] <= 0;
     			  2 : j[2] <= 0;
        		  3 : j[3] <= 0;
       
                	 default : s <= s;                                    // the state does not changes
                        endcase
   		 end
  
	   endmodule





                                                                      TEST BENCH(FOR DOWN LIFT)

module stimulus;
  reg [0:3] i;
  reg clk;
 
  wire [1:0]s;
  wire v;
  
  downlift DUT(s,v,i,clk);
  
 
  initial
    begin
      $dumpfile("dump.vcd");
      $dumpvars(0);
      
      monitor;                                                                // USING TASK OR CALLING TASK
      
      i=15;                 // or you can also write i=4'b1111
      
      clk=1'b1;
      
    end
  
  always
    #(5) clk=~clk;
  
  
     initial #(80) $finish;
  
  task monitor;                                                                    // I CREATED TASK
    $monitor($time,"s=%b,v=%b,i=%b",s,v,i);
  endtask
endmodule




                                                                      OUTPUT ( when input is 1111 0r f or we are top floor and want to go lower floor by one by one)

 			     0 s=xx,v=1,i=1111               j=f   s=x                          // j is not displaied it is written by me by watching the wave form 
# KERNEL:                    5 s=11,v=1,i=1111               j=e   s=3              3rd floor  // s I coded into decimal form for easier to understand and also we can directly use %d instead of %b
# KERNEL:                   15 s=10,v=1,i=1111               j=c   s=2              2nd floor
# KERNEL:                   25 s=01,v=1,i=1111               j=8   s=1              1st floor 
# KERNEL:                   35 s=00,v=0,i=1111               j=0   s=0              GROUND floor




_________________________________________________________________________________________________________________________________________________________________________________________________________









 							     $  UP LIFT PROGRAM  $
                                                              ___________________




module uplift(s,v,i,clk);
  output reg [1:0] s;
  output reg v;
  input [0:3] i;
  input clk;
  reg [0:3] j;
  
  always@(*)
    j[0:3] <= i[0:3];
  
  always@(*)
    v <= |j[0:3] ;
  
  always@(negedge clk & v)
    begin
      s[1] <= ((~j[0])&(~j[1]))&(j[3] | j[2]);                               // FOR X
      
      s[0] <= (~j[0])&(j[1] | ((~j[2])&j[3]));                              // FOR Y
    end
  
  always@(s)
    case(s)
      0 : j[0] <= 0;
      1 : j[1] <= 0;
      2 : j[2] <= 0;
      3 : j[3] <= 0;
      
      default: s <= s;
      
    endcase
endmodule




     							             TEST BENCH( for UPLIFT)

module stimulus;
  reg [0:3] i;
  reg clk;
  wire [1:0] s;
  wire v;
  
  uplift DUT(s,v,i,clk);
  
  initial
    begin
      $dumpfile("dump.vcd");
      $dumpvars(0);
      
      monitor;
      
      clk=1;
      
      i=4'b1111;
      
    end
  
  always #(2) clk=~clk;
  
  initial #(30) $finish;
      
  task monitor;
    
    $monitor($time," s=%d,i=%b,v=%b",s,i,v);
  endtask
  
endmodule



						    OUTPUT ( When you are at ground floor and wants to go top floor one by one floor)


# KERNEL:                    0 s=x,i=1111,v=1              j=f              // j is the memory or register . The value of it is written by me with the help of watching the wave form.
# KERNEL:                    2 s=0,i=1111,v=1              j=7              // GROUND FLOOR
# KERNEL:                    6 s=1,i=1111,v=1              j=3              // 1st FLOOR 
# KERNEL:                   10 s=2,i=1111,v=1              j=1              // 2nd FLOOR
# KERNEL:                   14 s=3,i=1111,v=0              j=0              // 3rd FLOOR